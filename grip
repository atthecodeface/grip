#!/usr/bin/env python3
"""
Grip is a tool to manage the integration of git modules and submodules,
where the submodules are used in a plethora of higher level modules

To do:

update_upstream
merge
publish

individual paths in fetch, update_upstream, merge
e.g. grip fetch <cdl>

requirements

pip install toml

"""
import sys, os, re
import inspect
from typing import List

frame = inspect.currentframe()
assert frame is not None
grip_dir = os.path.dirname(os.path.abspath(inspect.getfile(frame)))
sys.path.append(grip_dir) # So the hooks can use lib.* too
if "GRIP_HOOKS" in os.environ:
    sys.path.extend(os.environ["GRIP_HOOKS"].split(":"))
    pass
else:
    sys.path.append(os.path.dirname(grip_dir)) # Append ".." to the path if no explicit hooks path provided
    pass

import argparse
import lib.command
from cmds import *

grip_hooks = None
try:
    import grip_hooks # type:ignore
except ModuleNotFoundError:
    pass

if grip_hooks is not None:
    lib.repo.GripRepo.add_hooks(grip_hooks.hooks)
    lib.command.GripCommandBase.add_hooks(grip_hooks.hooks)
    pass

def main(prog:str, globalargs:List[str]) -> None:
    """
    The primary API to the Grip toolset
    """
    cmd = lib.command.GripCommand(command_name=prog, parent=None, args=globalargs) # args for recording the invocation
    parsed_cmd = cmd.parse_command(args=globalargs)

    if parsed_cmd.subcommand is None:
        cmd.invoke_subcommand("help",[])
        return

    # Invoke command with options
    cmd.invoke_subcommand(parsed_cmd.subcommand, globalargs) # parsed_cmd.subcommand_args)

    # Done
    pass

if __name__ == "__main__":
    main(sys.argv[0], sys.argv[1:])

